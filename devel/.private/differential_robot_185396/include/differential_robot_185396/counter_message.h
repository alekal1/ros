// Generated by gencpp from file differential_robot_185396/counter_message.msg
// DO NOT EDIT!


#ifndef DIFFERENTIAL_ROBOT_185396_MESSAGE_COUNTER_MESSAGE_H
#define DIFFERENTIAL_ROBOT_185396_MESSAGE_COUNTER_MESSAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace differential_robot_185396
{
template <class ContainerAllocator>
struct counter_message_
{
  typedef counter_message_<ContainerAllocator> Type;

  counter_message_()
    : count_left(0)
    , count_right(0)  {
    }
  counter_message_(const ContainerAllocator& _alloc)
    : count_left(0)
    , count_right(0)  {
  (void)_alloc;
    }



   typedef int32_t _count_left_type;
  _count_left_type count_left;

   typedef int32_t _count_right_type;
  _count_right_type count_right;





  typedef boost::shared_ptr< ::differential_robot_185396::counter_message_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::differential_robot_185396::counter_message_<ContainerAllocator> const> ConstPtr;

}; // struct counter_message_

typedef ::differential_robot_185396::counter_message_<std::allocator<void> > counter_message;

typedef boost::shared_ptr< ::differential_robot_185396::counter_message > counter_messagePtr;
typedef boost::shared_ptr< ::differential_robot_185396::counter_message const> counter_messageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::differential_robot_185396::counter_message_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::differential_robot_185396::counter_message_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace differential_robot_185396

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'differential_robot_185396': ['/home/alekal/catkin_ws/src/differential_robot_185396/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::differential_robot_185396::counter_message_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::differential_robot_185396::counter_message_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::differential_robot_185396::counter_message_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::differential_robot_185396::counter_message_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::differential_robot_185396::counter_message_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::differential_robot_185396::counter_message_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::differential_robot_185396::counter_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9acad0024d496a45d7194e5310734a3c";
  }

  static const char* value(const ::differential_robot_185396::counter_message_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9acad0024d496a45ULL;
  static const uint64_t static_value2 = 0xd7194e5310734a3cULL;
};

template<class ContainerAllocator>
struct DataType< ::differential_robot_185396::counter_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "differential_robot_185396/counter_message";
  }

  static const char* value(const ::differential_robot_185396::counter_message_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::differential_robot_185396::counter_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
int32 count_left\n\
int32 count_right\n\
\n\
";
  }

  static const char* value(const ::differential_robot_185396::counter_message_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::differential_robot_185396::counter_message_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.count_left);
      stream.next(m.count_right);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct counter_message_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::differential_robot_185396::counter_message_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::differential_robot_185396::counter_message_<ContainerAllocator>& v)
  {
    s << indent << "count_left: ";
    Printer<int32_t>::stream(s, indent + "  ", v.count_left);
    s << indent << "count_right: ";
    Printer<int32_t>::stream(s, indent + "  ", v.count_right);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DIFFERENTIAL_ROBOT_185396_MESSAGE_COUNTER_MESSAGE_H
