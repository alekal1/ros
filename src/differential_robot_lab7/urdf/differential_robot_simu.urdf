<?xml version="1.0"?>
<robot name="differential_robot" xmlns:xacro="http://www.ros.org/wiki/xacro">

  <xacro:property name="wheel_dist" value="0.165" />
  <xacro:property name="wheel_diam" value="0.07" />
  <xacro:property name="head_side" value="0.03" />
  <xacro:property name="head_offset" value="0.06" />
  <xacro:property name="base_thickness" value="0.02" />
  <xacro:property name="wheel_thickness" value="0.01" />
  <xacro:property name="passive_wheel_diam" value="0.01" />
  
  <xacro:property name="base_mass" value="0.1" />
  <xacro:property name="head_mass" value="0.02" />
  <xacro:property name="passive_wheel_holder_mass" value="0.02" />
  <xacro:property name="passive_wheel_mass" value="0.02" />
  <xacro:property name="wheel_mass" value="0.015" />

  <material name="grey">
    <color rgba="0.1 0.1 0.1 1"/>
  </material>
  <material name="white">
    <color rgba="1 1 1 1"/>
  </material>
  <material name="lgrey">
    <color rgba="0.6 0.6 0.6 1"/>
  </material>
  <material name="purple">
    <color rgba="0.5 0.0 0.7 1"/>
  </material>

  <!-- Macro for the two wheels -->
  <xacro:macro name="wheel" params="side reflect">

    <link name="${side}_wheel">
      <visual>
        <origin xyz="0 0 0" rpy="${-pi/2} 0 0" />
        <geometry>
          <cylinder radius="${wheel_diam/2}" length="${wheel_thickness}"/>
        </geometry>
        <material name="grey"/>
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="${-pi/2} 0 0" />
        <geometry>
          <cylinder radius="${wheel_diam/2}" length="${wheel_thickness}"/>
        </geometry>
      </collision>
      <inertial>
        <mass value="${wheel_mass}"/>
        <inertia ixx="${(wheel_mass*(3*(wheel_diam/2)*(wheel_diam/2)+base_thickness*base_thickness))/12}" ixy="0.0" ixz="0.0" izz="${(wheel_mass*(3*(wheel_diam/2)*(wheel_diam/2)+base_thickness*base_thickness))/12}" iyz="0.0" iyy="${(wheel_mass*(wheel_diam/2)*(wheel_diam/2))/2}"/>
      </inertial>
    </link>
    
    <joint name="base_to_${side}_wheel" type="continuous">
      <axis xyz="0 1 0" rpy="0 0 0" />
      <parent link="base_link"/>
      <child link="${side}_wheel"/>
      <limit effort="30" velocity="20.0"/>
      <origin xyz="0 ${reflect*wheel_dist/2} 0"/>
    </joint>

    <link name="deco_${side}_wheel">
        <visual>        
            <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
            <geometry>
                <box size = "${0.8*wheel_diam} 0.01 0.002"/>
            </geometry>
            <material name="purple"/>
        </visual>
    </link>

    <joint name="wheel_${side}_to_deco" type = "fixed">
        <parent link="${side}_wheel"/>
        <child link="deco_${side}_wheel"/>
        <origin xyz="0 ${reflect*wheel_thickness/2} 0"/>
    </joint>

    <!-- This block provides the simulator (Gazebo) with information on a few additional
    physical properties. See http://gazebosim.org/tutorials/?tut=ros_urdf for more-->
    <gazebo reference="${side}_wheel">
      <mu1 value="100000.0"/>
      <mu2 value="3000000.0"/>
      <kp value="10000000.0" />
      <kd value="100000.0" />
      <material>Gazebo/Grey</material>
    </gazebo>

    <!-- This block connects the wheel joint to an actuator (motor), which informs both
    simulation and visualization of the robot -->
    <transmission name="${side}_wheel_trans">
      <type>transmission_interface/SimpleTransmission</type>
      <actuator name="${side}_wheel_motor">
        <mechanicalReduction>1</mechanicalReduction>
      </actuator>
      <joint name="base_to_${side}_wheel">
        <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
      </joint>
    </transmission>

  </xacro:macro>

  
  
  
  <!-- Building wheels using macro -->
  <xacro:wheel side="left" reflect="1"/>
  <xacro:wheel side="right" reflect="-1"/>
  
  <link name="base_footprint">
  </link>

  <joint name="base_footprint_to_base_link" type="fixed">
    <parent link="base_footprint"/>
    <child link="base_link"/>
    <origin xyz="0 0 ${base_thickness/2+(wheel_diam-base_thickness)/2}"/>
  </joint>

  <link name="base_link">
    <visual>
      <geometry>
        <cylinder length="${base_thickness}" radius="${(wheel_dist-wheel_thickness)/2}"/>
      </geometry>           
      <material name="lgrey"/>
      <origin xyz="0 0 0"/>
    </visual>
    <inertial>
      <mass value="${base_mass}"/>
      <inertia ixx="${(base_mass*(3*(((wheel_dist-wheel_thickness)/2)/2)*(((wheel_dist-wheel_thickness)/2)/2)+base_thickness*base_thickness))/12}" ixy="0.0" ixz="0.0" iyy="${(base_mass*(3*(((wheel_dist-wheel_thickness)/2)/2)*(((wheel_dist-wheel_thickness)/2)/2)+base_thickness*base_thickness))/12}" iyz="0.0" izz="${(base_mass*((wheel_dist-wheel_thickness)/2)*((wheel_dist-wheel_thickness)/2))/2}"/>
    </inertial>
    <collision>
      <geometry>
        <cylinder length="${base_thickness}" radius="${(wheel_dist-wheel_thickness)/2}"/>
      </geometry>
    </collision>   
  </link>

  

  <link name="head">
    <visual>
      <geometry>
        <box size="${head_side} ${head_side} ${head_side}"/>
      </geometry>           
      <material name="white"/>
    </visual>
    <inertial>
      <mass value="${head_mass}"/>
      <inertia ixx="${(head_mass*(2*head_side*head_side))/12}" ixy="0.0" ixz="0.0" iyy="${(head_mass*(2*head_side*head_side))/12}" iyz="0.0" izz="${(head_mass*(2*head_side*head_side))/12}"/>
    </inertial>
    <collision>
      <geometry>
        <box size="${head_side} ${head_side} ${head_side}"/>
      </geometry>
    </collision>   
  </link>

  <joint name="base_to_head" type="fixed">
    <parent link="base_link"/>
    <child link="head"/>
    <origin xyz="${head_offset} 0 ${base_thickness/2+head_side/2}"/>
  </joint>

  <link name="passive_wheel_holder">
    <visual>
      <geometry>
        <cylinder length="${(wheel_diam-base_thickness)/2-passive_wheel_diam/2}" radius="${passive_wheel_diam/2}"/>
      </geometry>            
      <material name="white"/>
      <origin xyz="0 0 0"/>
    </visual>
    <inertial>
      <mass value="${passive_wheel_holder_mass}"/>
      <inertia ixx="${(passive_wheel_holder_mass*(3*(passive_wheel_diam/2)*(passive_wheel_diam/2)+((wheel_diam-base_thickness)/2-passive_wheel_diam/2)*((wheel_diam-base_thickness)/2-passive_wheel_diam/2)))/12}" ixy="0.0" ixz="0.0" iyy="${(passive_wheel_holder_mass*(3*(passive_wheel_diam/2)*(passive_wheel_diam/2)+((wheel_diam-base_thickness)/2-passive_wheel_diam/2)*((wheel_diam-base_thickness)/2-passive_wheel_diam/2)))/12}" iyz="0.0" izz="${(passive_wheel_holder_mass*(3*(passive_wheel_diam/2)*(passive_wheel_diam/2)+((wheel_diam-base_thickness)/2-passive_wheel_diam/2)*((wheel_diam-base_thickness)/2-passive_wheel_diam/2)))/12}"/>
    </inertial>  
    <collision>
      <geometry>
        <cylinder length="${(wheel_diam-base_thickness)/2-passive_wheel_diam/2}" radius="${passive_wheel_diam/2}"/>
      </geometry>
    </collision>    
  </link>

  <joint name="base_to_passive_wheel_holder" type="fixed">
    <parent link="base_link"/>
    <child link="passive_wheel_holder"/>
    <origin xyz="${head_offset} 0 -${(base_thickness+((wheel_diam-base_thickness)/2-passive_wheel_diam/2))/2}"/>
  </joint>

  <link name="passive_wheel">
    <visual>
      <geometry>
        <sphere radius="${passive_wheel_diam/2}"/>
      </geometry>             
      <material name="white"/>
    </visual>
    <inertial>
      <mass value="${passive_wheel_mass}"/>
      <inertia ixx="${(2/5)*(passive_wheel_mass*(passive_wheel_diam/2)*(passive_wheel_diam/2))}" ixy="0.0" ixz="0.0" iyy="${(2/5)*(passive_wheel_mass*(passive_wheel_diam/2)*(passive_wheel_diam/2))}" iyz="0.0" izz="${(2/5)*(passive_wheel_mass*(passive_wheel_diam/2)*(passive_wheel_diam/2))}"/>
    </inertial>    
    <collision>
      <geometry>
        <sphere radius="${passive_wheel_diam/2}"/>
      </geometry>
    </collision>   
  </link>

  
  <gazebo reference="passive_wheel">
    <mu1 value="0"/>
    <mu2 value="0"/>
    <kp value="1000.0" />
    <kd value="1000.0" />      
  </gazebo>
  

  <joint name="passive_wheel_holder_to_wheel" type="fixed">
    <parent link="passive_wheel_holder"/>
    <child link="passive_wheel"/>
    <origin xyz="0 0 ${-((wheel_diam-base_thickness)/2-passive_wheel_diam/2)/2}"/>
  </joint>

  

  
  <gazebo>
    <!-- Gazebo plugin for ROS Control -->
    <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
      <robotNamespace>/</robotNamespace>
      <robotSimType>gazebo_ros_control/DefaultRobotHWSim</robotSimType>
      <legacyModeNS>true</legacyModeNS>
    </plugin>
    <!-- Ground truth for Gazebo -->
    <plugin name="p3d_base_controller" filename="libgazebo_ros_p3d.so">
      <alwaysOn>true</alwaysOn>
      <updateRate>50.0</updateRate>
      <bodyName>base_link</bodyName>
      <topicName>ground_truth</topicName>
      <gaussianNoise>0.01</gaussianNoise>
      <frameName>map</frameName>
      <xyzOffsets>0 0 0</xyzOffsets>
      <rpyOffsets>0 0 0</rpyOffsets>
    </plugin>
  </gazebo>

  
  
  
</robot>